dynmic programming
class Solution:
    def tri(self, n, dp):
        if n == 0:
            return 0
        elif n == 1 or n == 2:
            return 1
        elif dp[n] != -1:
            return dp[n]
        dp[n] = self.tri(n-3, dp) + self.tri(n-2, dp) + self.tri(n-1, dp)
        return dp[n]

    def tribonacci(self, n: int) -> int:
        dp = [-1] * (n + 1)
        if n == 0:
            return 0
        elif n == 1 or n == 2:
            return 1
        return self.tri(n-3, dp) + self.tri(n-2, dp) + self.tri(n-1, dp)
===========================================================================================
recurrion 
class Solution:
    def tribonacci(self, n: int) -> int:
        if(n==0):
            return 0
        if(n==1):
            return 1
        if(n==2):
            return 1
        return self.tribonacci(n-3)+self.tribonacci(n-1)+self.tribonacci(n-2)